---
description: React组件开发规范
globs: ["**/*.tsx", "**/*.jsx"]
alwaysApply: true
---

# React 组件开发规范

## 组件结构规范

### 1. 组件定义
- 优先使用函数组件和 React.FC 类型
- 组件名使用 PascalCase 命名
- **页面组件使用默认导出，可复用组件使用具名导出**

```tsx
// 可复用组件 - 具名导出
interface ComponentProps {
  title: string;
  children?: React.ReactNode;
}

const MyComponent: React.FC<ComponentProps> = ({ title, children }) => {
  return (
    <div>
      <h1>{title}</h1>
      {children}
    </div>
  );
};

export { MyComponent };

// 页面组件 - 默认导出
const HomePage: React.FC = () => {
  return <div>首页内容</div>;
};

export default HomePage;
```

### 2. Props 接口定义
- 在组件文件顶部定义 Props 接口
- 使用 TypeScript 严格类型定义
- 可选属性使用 `?` 标记

```tsx
interface UserCardProps {
  user: {
    id: number;
    name: string;
    email: string;
    avatar?: string;
  };
  onEdit?: (userId: number) => void;
  className?: string;
}
```

## Hooks 使用规范

### 1. 状态管理
- 使用 `useState` 管理本地状态
- 复杂状态使用 `useReducer`
- 状态更新使用函数式更新

```tsx
const [count, setCount] = useState<number>(0);
const [user, setUser] = useState<User | null>(null);

// 函数式更新
setCount(prev => prev + 1);
```

### 2. 副作用处理
- 使用 `useEffect` 处理副作用
- 正确设置依赖数组
- 清理副作用（如事件监听器、定时器）

```tsx
useEffect(() => {
  const timer = setInterval(() => {
    // 定时器逻辑
  }, 1000);

  return () => clearInterval(timer);
}, []);

// 数据获取示例
const fetchUsers = async () => {
  setLoading(true);
  try {
    const response = await userApi.getUsers({ page: 1, pageSize: 10 });
    if (response.code === 200) {
      setUsers(response.result.users);
      message.success('获取用户列表成功');
    }
  } catch (error) {
    message.error('获取用户列表失败');
    console.error('错误:', error);
  } finally {
    setLoading(false);
  }
};

useEffect(() => {
  fetchUsers();
}, []);
```

### 3. 性能优化
- 使用 `useCallback` 和 `useMemo` 优化性能
- 避免在渲染函数中创建对象和函数

```tsx
// 事件处理函数
const handleClick = useCallback((id: string) => {
  // 处理点击事件
}, []);

// 计算属性
const expensiveValue = useMemo(() => {
  return computeExpensiveValue(data);
}, [data]);
```

## 自动导入使用

项目已配置自动导入，无需手动导入以下内容：
- React Hooks 和工具函数（useState, useEffect, useCallback, useMemo 等）
- React Router 组件（Link, NavLink 等）
- Antd 组件（Button, Form, Input, Table 等）

**注意**：React 本身仍需要手动导入

```tsx
// 需要手动导入 React
import React from 'react';

// 需要手动导入 API 服务
import { userApi } from '@/services/api';
import type { User } from '@/services/types/user';

// 无需导入，直接使用
const [users, setUsers] = useState<User[]>([]);
const handleClick = () => message.success('操作成功');
```

### 2. React 命名空间扩展
项目已扩展 React 命名空间，可直接使用：
- `React.Router` - React Router 相关 API
- `React.Http` - HTTP 请求封装
- `React.RouterRules` - 不需要登录的路由地址配置
- `React.navigate` - 项目扩展的导航函数（在 App.tsx 中赋值）

```tsx
// 使用扩展的 React 命名空间
const router = React.Router;
const http = React.Http;
const publicRoutes = React.RouterRules;

// 在 App.tsx 中设置项目导航函数
const navigate = useNavigate();
React.navigate = navigate;

// 在其他组件中可直接使用
React.navigate('/about');
```

## 组件开发最佳实践

### 1. 组件职责单一
- 每个组件只负责一个功能
- 复杂组件拆分为多个小组件
- 使用组合模式而非继承

### 2. 性能优化
- 使用 `React.memo` 包装纯组件
- 避免在渲染函数中创建对象和函数

```tsx
const MemoizedComponent = React.memo(({ data }) => {
  // 计算属性
  const processedData = useMemo(() => {
    return data.map(item => ({ ...item, processed: true }));
  }, [data]);

  // 事件处理函数
  const handleClick = useCallback((id: string) => {
    // 处理点击事件
  }, []);

  return <div>{/* 组件内容 */}</div>;
});
```

### 3. 错误边界
- 使用错误边界处理组件错误
- 提供友好的错误提示

### 4. 可访问性
- 使用语义化 HTML 标签
- 添加适当的 ARIA 属性
- 确保键盘导航支持

## 文件路由规范

### 1. 页面组件
- 在 `src/views/` 目录下创建页面组件
- 使用 `index.tsx` 作为页面入口文件
- 使用 `vite-plugin-pages` 自动根据文件路径生成路由

```tsx
// src/views/about/index.tsx -> /about
// src/views/user/profile.tsx -> /user/profile
```

### 2. vite-plugin-pages 特性
项目使用 `vite-plugin-pages` 自动生成路由配置：

```tsx
// App.tsx 中使用自动生成的路由
import routes from '~react-pages';

const Routers = () => {
  const navigate = useNavigate();
  React.navigate = navigate; // 赋值给 React 命名空间
  
  return (
    <React.Suspense>
      {useRoutes(routes)}
    </React.Suspense>
  );
};
```

### 3. 页面跳转
- 使用 `Link` 组件进行页面跳转
- 使用 `React.navigate` 进行编程式导航

```tsx
// 声明式导航
<Link to="/about">关于我们</Link>

// 编程式导航
React.navigate('/about');
```

## 组件文件结构

```
src/
├── components/           # 可复用组件（具名导出）
│   ├── Button/
│   │   ├── index.tsx    # 组件主文件
│   │   ├── Button.types.ts  # 类型定义
│   │   └── Button.stories.tsx  # Storybook（可选）
│   └── ...
└── views/               # 页面组件（默认导出）
    ├── index.tsx        # 首页
    └── page1/
        └── index.tsx    # 页面1
```

参考文件：
- @src/views/page1/index.tsx
- @src/App.tsx